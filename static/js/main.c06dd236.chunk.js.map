{"version":3,"sources":["components/Dropdown.js","components/Selection.js","data/categories.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","handleChange","bind","e","this","changeItem","items","target","value","onChange","map","item","key","item_id","Component","DropdownItem","name","Selection","state","option","new_item","setState","console","log","data","rent_names","RO_CJ_COM","RO_CJ_AP1","RO_CJ_AP2","App","className","category","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2QAEMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,E,yDAINC,GACTC,KAAKJ,MAAMK,WAAWD,KAAKJ,MAAMM,MAAMH,EAAEI,OAAOC,U,+BAGhD,OACI,4BAAQC,SAAUL,KAAKH,cACdG,KAAKJ,MAAMM,MAAMI,KAAI,SAASC,EAAKC,GAAM,OAAO,kBAAC,EAAD,CAAcD,KAAMA,EAAME,QAASD,EAAKA,IAAKA,Y,GAX3FE,aAiBjBC,E,uKAEE,OACI,4BAAQP,MAAOJ,KAAKJ,MAAMa,SACrBT,KAAKJ,MAAMW,KAAKK,U,GAJNF,aAUZf,ICCAkB,E,kDA3BX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IACDkB,MAAM,CACPC,OAAO,MAEX,EAAKd,WAAa,EAAKA,WAAWH,KAAhB,gBALH,E,uDAORkB,GACPhB,KAAKiB,SACD,CACIV,KAAKS,IAGbE,QAAQC,IAAIH,K,+BAKZ,OACI,kBAAC,EAAD,CAAUd,MAAOF,KAAKJ,MAAMwB,KAAKA,KAAMnB,WAAYD,KAAKC,iB,GApB5CS,aCFlBW,EACG,QADHA,EAEG,aAFHA,EAGG,yBAsBHC,EAAY,CACdV,KAAKS,EACLD,KAAM,IAGJG,EAAU,CACZX,KAAKS,EACLD,KAAM,KAEJI,EAAU,CACZZ,KAAKS,EACLD,KAAM,KA4BJA,EAAK,CAVA,CACPR,KAAK,SACLQ,KAAK,CAvCK,CACVR,KAAK,YACLQ,KAAK,CAdU,CACfR,KAAKS,EACLD,KAAM,IAEO,CACbR,KAAKS,EACLD,KAAM,KAEO,CACbR,KAAKS,EACLD,KAAM,OAuBE,CACRR,KAAK,OACLQ,KAAK,CACDE,EACAC,EACAC,IAGI,CACRZ,KAAK,SACLQ,KAAK,CACDE,EACAC,EACAC,OC/BOC,E,uKAbX,OACE,yBAAKC,UAAY,OACdN,EAAKd,KAAI,SAASqB,EAASnB,GAC1B,OACF,kBAAC,EAAD,CAAWY,KAAMO,EAAUnB,IAAKA,Y,GAPtBE,aCQEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.c06dd236.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Dropdown extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e){\r\n        this.props.changeItem(this.props.items[e.target.value]);\r\n    }\r\n    render() {\r\n        return (\r\n            <select onChange={this.handleChange}>\r\n                    {this.props.items.map(function(item,key) {return <DropdownItem item={item} item_id={key} key={key}/>})}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nclass DropdownItem extends Component{\r\n    render() {\r\n        return (\r\n            <option value={this.props.item_id}>\r\n                {this.props.item.name}\r\n            </option>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dropdown;","import React, { Component } from 'react';\r\nimport Dropdown from './Dropdown';\r\nclass Selection extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            option:null\r\n        }\r\n        this.changeItem = this.changeItem.bind(this);\r\n    }\r\n    changeItem(new_item){\r\n        this.setState(\r\n            {\r\n                item:new_item\r\n            }\r\n        );\r\n        console.log(new_item);\r\n    }\r\n\r\n    render(){\r\n        //console.log(this.props.data.data);\r\n        return( \r\n            <Dropdown items={this.props.data.data} changeItem={this.changeItem}/>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Selection;","const rent_names={\r\n    COM: \"Camin\",\r\n    AP1: \"Garsoniera\",\r\n    AP2: \"Apartament cu 2 camere\"\r\n}\r\nconst RO_BUC_COM = {\r\n    name:rent_names.COM,\r\n    data: 50\r\n}\r\nconst RO_BUC_AP1={\r\n    name:rent_names.AP1,\r\n    data: 500\r\n}\r\nconst RO_BUC_AP2={\r\n    name:rent_names.AP2,\r\n    data: 5000\r\n}\r\nconst RO_BUC ={\r\n    name:\"Bucuresti\",\r\n    data:[\r\n        RO_BUC_COM,\r\n        RO_BUC_AP1,\r\n        RO_BUC_AP2\r\n    ]\r\n};\r\nconst RO_CJ_COM = {\r\n    name:rent_names.COM,\r\n    data: 70\r\n}\r\n\r\nconst RO_CJ_AP1={\r\n    name:rent_names.AP1,\r\n    data: 700\r\n}\r\nconst RO_CJ_AP2={\r\n    name:rent_names.AP2,\r\n    data: 7000\r\n}\r\nconst RO_CJ={\r\n    name:\"Cluj\",\r\n    data:[\r\n        RO_CJ_COM,\r\n        RO_CJ_AP1,\r\n        RO_CJ_AP2\r\n    ]\r\n};\r\nconst RO_BV={\r\n    name:\"Brasov\",\r\n    data:[\r\n        RO_CJ_COM,\r\n        RO_CJ_AP1,\r\n        RO_CJ_AP2\r\n    ]\r\n}\r\nconst rent={\r\n    name:\"Chirie\",\r\n    data:[\r\n        RO_BUC,\r\n        RO_CJ,\r\n        RO_BV\r\n    ]\r\n    \r\n};\r\n\r\nconst data=[\r\n    rent\r\n];\r\n\r\nexport{data}","import React, { Component } from 'react';\nimport './App.css';\nimport Selection from './components/Selection';\nimport {data} from './data/categories.js';\nclass App extends Component {\n  \n  render() {\n    return ( \n      <div className = \"App\" >\n        {data.map(function(category,key){\n          return (\n        <Selection data={category} key={key}/>\n        )})}\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}